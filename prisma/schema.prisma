// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id          Int          @id @default(autoincrement())
  name String
  fantasyName String
  cpfCnpj String
  phone String
  email String
  cep  String
  street String
  number String
  complement String
  city String
  uf String
  parentCompanyId      Int?     @map("parentCompany")
  parentCompany Company? @relation("ChildCompanies", fields: [parentCompanyId], references: [id])
  childCompanies Company[] @relation("ChildCompanies")
  isActive Boolean
  createdAt DateTime
  updatedAt DateTime
}

model User {
  id          Int          @id @default(autoincrement())
  email       String       @unique
  password    String
  name        String
  profilePhoto String?
  isLogged Boolean? @default(false)
  lastAccess  DateTime?
  permissions Json
  employee    Employee?
  isActive    Boolean @default(true)
  createAt    DateTime @default(now())
  updatedAt   DateTime?

  @@map("user")
}

model Permission {
  id             Int          @id @default(autoincrement())
  description    String
  type           String
  isActive       Boolean
  @@map("permission")
}

model Person {
  @@map("person")
  id        Int       @id @default(autoincrement())
  firstName String
  lastname  String?
  phone     String?
  email     String?
  address   Address[]
  employee  Employee?
  isActive  Boolean? @default(false)
  createAt  DateTime @default(now())
  updatedAt DateTime?
}

model Employee {
  id             Int     @id @default(autoincrement())
  corporatePhone String
  corporateEmail String
  wage           Decimal
  workSchedule   Json
  personId       Int     @unique
  person         Person  @relation(fields: [personId], references: [id])
  userId         Int     @unique
  user           User    @relation(fields: [userId], references: [id])

  @@map("employee")
}

model Department {
  id Int @id @default(autoincrement())
  description String
  roles Role[]
  isActive Boolean? @default(false)
  createAt DateTime @default(now())
  updatedAt DateTime?
}

model Role {
  id Int @id @default(autoincrement())
  description String
  departmentId Int @unique
  department Department @relation(fields: [departmentId], references: [id])
}

model Address {
  id            Int      @id @default(autoincrement())
  cep           String?
  street        String?
  number        String? @default("S/N")
  district      String?
  city          String
  uf            String
  isResidential Boolean
  isMain        Boolean? @default(true)
  personId      Int      @unique
  person        Person   @relation(fields: [personId], references: [id])
  createAt      DateTime? @default(now())
  updatedAt     DateTime?

  @@map("address")
}
