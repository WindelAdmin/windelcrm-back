// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int          @id @default(autoincrement())
  email       String       @unique
  password    String
  name        String?
  employee    Employee?
  permissions Permission[]
  lastAccess  DateTime
  isActive    Boolean
  createAt    DateTime
  updatedAt   DateTime

  @@map("user")
}

model Permission {
  id             Int          @id @default(autoincrement())
  description    String
  type           String
  parentId       Int          @unique
  parent         Permission?  @relation("SubPermission", fields: [parentId], references: [id])
  subPermissions Permission[] @relation("SubPermission")
  userId         Int          @unique
  user           User         @relation(fields: [userId], references: [id])
  isActive       Boolean

  @@map("permission")
}

model Person {
  @@map("person")
  id        Int       @id @default(autoincrement())
  firstName String
  lastname  String
  phone     String
  email     String
  address   Address[]
  employee  Employee?
  isActive  Boolean
  createAt  DateTime
  updatedAt DateTime
}

model Employee {
  id             Int     @id @default(autoincrement())
  corporatePhone String
  corporateEmail String
  wage           Decimal
  workSchedule   Json
  personId       Int     @unique
  person         Person  @relation(fields: [personId], references: [id])
  userId         Int     @unique
  user           User    @relation(fields: [userId], references: [id])

  @@map("employee")
}

model Address {
  id            Int      @id @default(autoincrement())
  cep           String
  street        String
  number        String
  district      String
  city          String
  uf            String
  addressType   String
  isResidential Boolean
  isMain        Boolean
  personId      Int      @unique
  person        Person   @relation(fields: [personId], references: [id])
  createAt      DateTime
  updatedAt     DateTime

  @@map("address")
}
