// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id              Int              @id @default(autoincrement())
  name            String
  fantasyName     String
  cpfCnpj         String
  phone           String
  email           String
  cep             String
  street          String
  number          String
  complement      String
  city            String
  uf              String
  parentCompanyId Int?             @map("parentCompany")
  parentCompany   Company?         @relation("ChildCompanies", fields: [parentCompanyId], references: [id], onDelete: Cascade)
  childCompanies  Company[]        @relation("ChildCompanies")
  users           User[]
  permissions     Permission[]
  persons         Person[]
  deparments      Department[]
  roles           Role[]
  userPermissions UserPermission[]
  personAddress   PersonAddress[]
  isActive        Boolean
  createdAt       DateTime
  updatedAt       DateTime
  employee        Employee[]
  workSchedule    WorkSchedule[]
  audit           Audit[]

  @@map("company")
}

model User {
  id              Int              @id @default(autoincrement())
  companyId       Int
  company         Company?         @relation(fields: [companyId], references: [id], onDelete: Cascade)
  email           String           @unique
  password        String
  name            String
  profilePhoto    String?
  isLogged        Boolean?         @default(false)
  lastAccess      DateTime?
  employee        Employee?
  userPermissions UserPermission[]
  audits          Audit[]
  isActive        Boolean          @default(true)
  createAt        DateTime         @default(now())
  updatedAt       DateTime?

  @@map("user")
}

model Permission {
  id              Int              @id @default(autoincrement())
  companyId       Int
  company         Company?         @relation(fields: [companyId], references: [id], onDelete: Cascade)
  description     String
  type            String
  isActive        Boolean
  userPermissions UserPermission[]

  @@map("permission")
}

model UserPermission {
  id           Int        @id @default(autoincrement())
  companyId    Int
  company      Company?   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  userId       Int
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  permissionId Int
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@map("user_permission")
}

model Person {
  id            Int             @id @default(autoincrement())
  companyId     Int
  company       Company?        @relation(fields: [companyId], references: [id], onDelete: Cascade)
  firstName     String
  lastname      String?
  phone         String?
  email         String?
  personAddress PersonAddress[]
  employee      Employee?
  isActive      Boolean?        @default(false)
  createAt      DateTime        @default(now())
  updatedAt     DateTime?

  @@map("person")
}

model Employee {
  id             Int           @id @default(autoincrement())
  companyId      Int
  company        Company?      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  corporatePhone String
  corporateEmail String
  wage           Decimal
  workSchedule   WorkSchedule?
  personId       Int           @unique
  person         Person        @relation(fields: [personId], references: [id], onDelete: Cascade)
  userId         Int           @unique
  user           User          @relation(fields: [userId], references: [id])
  roleId         Int           @unique
  role           Role          @relation(fields: [roleId], references: [id])

  @@map("employee")
}

model WorkSchedule {
  id                Int      @id @default(autoincrement())
  companyId         Int
  company           Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)
  day               String
  morningTimeInit   Int
  morningTimeEnd    Int
  afternoonTimeInit Int
  afternoonTimeEnd  Int
  employeeId        Int      @unique
  employee          Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("work_schedule")
}

model Department {
  id          Int       @id @default(autoincrement())
  companyId   Int
  company     Company?  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  description String
  roles       Role[]
  isActive    Boolean?  @default(false)
  createAt    DateTime  @default(now())
  updatedAt   DateTime?

  @@map("deparment")
}

model Role {
  id           Int        @id @default(autoincrement())
  companyId    Int
  company      Company?   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  description  String
  departmentId Int        @unique
  department   Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  employee     Employee[]

  @@map("role")
}

model PersonAddress {
  id            Int       @id @default(autoincrement())
  companyId     Int
  company       Company?  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  cep           String?
  street        String?
  number        String?   @default("S/N")
  district      String?
  city          String
  uf            String
  isResidential Boolean?  @default(true)
  isMain        Boolean?  @default(true)
  personId      Int       @unique
  person        Person    @relation(fields: [personId], references: [id], onDelete: Cascade)
  createAt      DateTime? @default(now())
  updatedAt     DateTime?

  @@map("person_address")
}

model Audit {
  id        Int       @id @default(autoincrement())
  companyId Int
  company   Company?  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  userId    Int
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userEmail String
  before    Json?
  after     Json
  createAt  DateTime? @default(now())

  @@map("audit")
}
